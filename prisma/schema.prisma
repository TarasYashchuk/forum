// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @map("email_address")
  username  String   @unique
  password  String
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  avatarUrl String?  @map("avatar_url")
  bio       String?  @map("biography")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  posts        Post[] // one user -> many posts
  comments     Comment[] // one user -> many comments
  postLikes    PostLike[]    @relation("UserPostLikes")
  commentLikes CommentLike[] @relation("UserCommentLikes")
  followedBy   Follower[]    @relation("UserFollowers")
  following    Follower[]    @relation("UserFollowing")
  resetTokens PasswordResetToken[]
  actionLogs ActionLog[]

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]

  @@map("roles")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  authorId Int
  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[] // one post can have many comments
  likes    PostLike[] // one post can have many likes
  actionLogs ActionLog[]

  @@map("posts")
}

model Comment {
  id      Int           @id @default(autoincrement())
  content String
  userId  Int
  postId  Int
  user    User          @relation(fields: [userId], references: [id])
  post    Post          @relation(fields: [postId], references: [id])
  likes   CommentLike[] // зворотнє посилання на модель CommentLike
  actionLogs ActionLog[]

  @@map("comments")
}

model PostLike {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation("UserPostLikes", fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  actionLogs ActionLog[]

  @@unique([userId, postId])
  @@map("post_likes")
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  userId    Int
  commentId Int
  user      User    @relation("UserCommentLikes", fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model Follower {
  id          Int @id @default(autoincrement())
  followerId  Int
  followingId Int

  follower  User @relation("UserFollowing", fields: [followerId], references: [id])
  following User @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("followers")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("password_reset_tokens")
}

model ActionLog {
  id        Int      @id @default(autoincrement())
  action    String
  userId    Int
  postId    Int?
  commentId Int?
  likeId    Int?
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id])
  post      Post?   @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  like      PostLike? @relation(fields: [likeId], references: [id])

  @@map("action_logs")
}